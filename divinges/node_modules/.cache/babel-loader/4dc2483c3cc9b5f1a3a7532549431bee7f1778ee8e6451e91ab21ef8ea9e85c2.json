{"ast":null,"code":"var _jsxFileName = \"/home/mosorior/Documentos/GitHub/Diving-ES/divinges/src/components/Earth.js\",\n  _s2 = $RefreshSig$();\nimport React, { useRef, useState } from 'react';\nimport { useFrame } from '@react-three/fiber';\nimport { OrbitControls, Sphere, useGLTF, useTexture } from '@react-three/drei';\nimport earthTexture from \"../assets/imgs/earth.jpg\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Earth = () => {\n  _s2();\n  var _s = $RefreshSig$();\n  const earthRef = useRef();\n  const [isDragging, setDragging] = useState(false);\n  const handlePointerDown = () => {\n    setDragging(true);\n  };\n  const handlePointerUp = () => {\n    setDragging(false);\n  };\n  const handlePointerMove = event => {\n    if (isDragging) {\n      const {\n        movementX,\n        movementY\n      } = event.nativeEvent;\n      earthRef.current.rotation.y += movementX / 300;\n      earthRef.current.rotation.x += movementY / 300;\n    }\n  };\n  const handlePointerLeave = () => {\n    setDragging(false);\n  };\n\n  // Rotar la Tierra automáticamente\n  useFrame(() => {\n    if (!isDragging && earthRef.current) {\n      earthRef.current.rotation.y -= 0.0005;\n    }\n  });\n  function Model({\n    ...props\n  }) {\n    _s();\n    const group = useRef();\n    const {\n      nodes,\n      materials\n    } = useGLTF(' ./assets/models/Earth.gltf');\n    return /*#__PURE__*/_jsxDEV(\"group\", {\n      ...props,\n      dispose: null,\n      children: /*#__PURE__*/_jsxDEV(\"group\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 11\n    }, this);\n  }\n  _s(Model, \"sGjd4dO4Tp4RBMr9xjC42yCxxlY=\", false, function () {\n    return [useGLTF];\n  });\n};\n_s2(Earth, \"Yu4QsPwwxKotXC6zeJULOwJPIKA=\", false, function () {\n  return [useFrame];\n});\n_c = Earth;\nexport default Earth;\nvar _c;\n$RefreshReg$(_c, \"Earth\");","map":{"version":3,"names":["React","useRef","useState","useFrame","OrbitControls","Sphere","useGLTF","useTexture","earthTexture","jsxDEV","_jsxDEV","Earth","_s2","_s","$RefreshSig$","earthRef","isDragging","setDragging","handlePointerDown","handlePointerUp","handlePointerMove","event","movementX","movementY","nativeEvent","current","rotation","y","x","handlePointerLeave","Model","props","group","nodes","materials","dispose","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/mosorior/Documentos/GitHub/Diving-ES/divinges/src/components/Earth.js"],"sourcesContent":["import React, { useRef, useState } from 'react';\nimport { useFrame } from '@react-three/fiber';\nimport { OrbitControls, Sphere, useGLTF, useTexture } from '@react-three/drei';\nimport earthTexture from \"../assets/imgs/earth.jpg\";\n\nexport const Earth = () => {\n  const earthRef = useRef();\n  const [isDragging, setDragging] = useState(false);\n\n  const handlePointerDown = () => {\n    setDragging(true);\n  };\n\n  const handlePointerUp = () => {\n    setDragging(false);\n  };\n\n  const handlePointerMove = (event) => {\n    if (isDragging) {\n      const { movementX, movementY } = event.nativeEvent;\n      earthRef.current.rotation.y += movementX / 300;\n      earthRef.current.rotation.x += movementY / 300;\n    }\n  };\n\n  const handlePointerLeave = () => {\n    setDragging(false);\n  };\n\n\n  // Rotar la Tierra automáticamente\n  useFrame(() => {\n    if (!isDragging && earthRef.current) {\n      earthRef.current.rotation.y -= 0.0005;\n    }\n  });\n\n  function Model({ ...props }) {\n    const group = useRef()\n    const { nodes, materials } = useGLTF(' ./assets/models/Earth.gltf')\n\n    return(\n          <group {...props} dispose={null}>\n            <group />\n          </group>\n        )\n      }\n  }\n\nexport default Earth;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAC/C,SAASC,QAAQ,QAAQ,oBAAoB;AAC7C,SAASC,aAAa,EAAEC,MAAM,EAAEC,OAAO,EAAEC,UAAU,QAAQ,mBAAmB;AAC9E,OAAOC,YAAY,MAAM,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpD,OAAO,MAAMC,KAAK,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAAA,IAAAC,EAAA,GAAAC,YAAA;EACzB,MAAMC,QAAQ,GAAGd,MAAM,CAAC,CAAC;EACzB,MAAM,CAACe,UAAU,EAAEC,WAAW,CAAC,GAAGf,QAAQ,CAAC,KAAK,CAAC;EAEjD,MAAMgB,iBAAiB,GAAGA,CAAA,KAAM;IAC9BD,WAAW,CAAC,IAAI,CAAC;EACnB,CAAC;EAED,MAAME,eAAe,GAAGA,CAAA,KAAM;IAC5BF,WAAW,CAAC,KAAK,CAAC;EACpB,CAAC;EAED,MAAMG,iBAAiB,GAAIC,KAAK,IAAK;IACnC,IAAIL,UAAU,EAAE;MACd,MAAM;QAAEM,SAAS;QAAEC;MAAU,CAAC,GAAGF,KAAK,CAACG,WAAW;MAClDT,QAAQ,CAACU,OAAO,CAACC,QAAQ,CAACC,CAAC,IAAIL,SAAS,GAAG,GAAG;MAC9CP,QAAQ,CAACU,OAAO,CAACC,QAAQ,CAACE,CAAC,IAAIL,SAAS,GAAG,GAAG;IAChD;EACF,CAAC;EAED,MAAMM,kBAAkB,GAAGA,CAAA,KAAM;IAC/BZ,WAAW,CAAC,KAAK,CAAC;EACpB,CAAC;;EAGD;EACAd,QAAQ,CAAC,MAAM;IACb,IAAI,CAACa,UAAU,IAAID,QAAQ,CAACU,OAAO,EAAE;MACnCV,QAAQ,CAACU,OAAO,CAACC,QAAQ,CAACC,CAAC,IAAI,MAAM;IACvC;EACF,CAAC,CAAC;EAEF,SAASG,KAAKA,CAAC;IAAE,GAAGC;EAAM,CAAC,EAAE;IAAAlB,EAAA;IAC3B,MAAMmB,KAAK,GAAG/B,MAAM,CAAC,CAAC;IACtB,MAAM;MAAEgC,KAAK;MAAEC;IAAU,CAAC,GAAG5B,OAAO,CAAC,6BAA6B,CAAC;IAEnE,oBACMI,OAAA;MAAA,GAAWqB,KAAK;MAAEI,OAAO,EAAE,IAAK;MAAAC,QAAA,eAC9B1B,OAAA;QAAA2B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACJ,CAAC;EAEZ;EAAC3B,EAAA,CATIiB,KAAK;IAAA,QAEiBxB,OAAO;EAAA;AAQtC,CAAC;AAAAM,GAAA,CA1CUD,KAAK;EAAA,QA0BhBR,QAAQ;AAAA;AAAAsC,EAAA,GA1BG9B,KAAK;AA4ClB,eAAeA,KAAK;AAAC,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}