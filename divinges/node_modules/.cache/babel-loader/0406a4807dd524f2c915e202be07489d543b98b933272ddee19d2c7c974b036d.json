{"ast":null,"code":"var _jsxFileName = \"/home/mosorior/Documentos/GitHub/Diving-ES/divinges/src/components/Earth.js\",\n  _s = $RefreshSig$();\nimport React, { useRef } from 'react';\nimport { useFrame, useLoader } from '@react-three/fiber';\nimport { Sphere } from '@react-three/drei';\nimport { TextureLoader } from 'three';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Earth = () => {\n  _s();\n  const earthRef = useRef();\n  const texture = useLoader(TextureLoader, './earth.jpg');\n\n  // Rotar la Tierra usando useFrame\n  useFrame(() => {\n    if (earthRef.current) {\n      earthRef.current.rotation.y += 0.005;\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(Sphere, {\n    ref: earthRef,\n    args: [2, 64, 64],\n    children: /*#__PURE__*/_jsxDEV(\"meshStandardMaterial\", {\n      attach: \"material\",\n      color: \"white\",\n      map: \"earth.jpg\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 5\n  }, this);\n};\n_s(Earth, \"MhQIcJSh6gtpUB25gOx154CSa48=\", false, function () {\n  return [useLoader, useFrame];\n});\n_c = Earth;\nexport default Earth;\nvar _c;\n$RefreshReg$(_c, \"Earth\");","map":{"version":3,"names":["React","useRef","useFrame","useLoader","Sphere","TextureLoader","jsxDEV","_jsxDEV","Earth","_s","earthRef","texture","current","rotation","y","ref","args","children","attach","color","map","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/mosorior/Documentos/GitHub/Diving-ES/divinges/src/components/Earth.js"],"sourcesContent":["import React, { useRef } from 'react';\nimport { useFrame, useLoader } from '@react-three/fiber';\nimport { Sphere } from '@react-three/drei';\nimport { TextureLoader } from 'three';\n\nconst Earth = () => {\n  const earthRef = useRef();\n  const texture = useLoader(TextureLoader, './earth.jpg')\n\n  // Rotar la Tierra usando useFrame\n  useFrame(() => {\n    if (earthRef.current) {\n      earthRef.current.rotation.y += 0.005;\n    }\n  });\n\n  return (\n    <Sphere ref={earthRef} args={[2, 64, 64]}>\n      <meshStandardMaterial attach=\"material\" color=\"white\" map=\"earth.jpg\" />\n    </Sphere>\n  );\n};\n\nexport default Earth;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,MAAM,QAAQ,OAAO;AACrC,SAASC,QAAQ,EAAEC,SAAS,QAAQ,oBAAoB;AACxD,SAASC,MAAM,QAAQ,mBAAmB;AAC1C,SAASC,aAAa,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtC,MAAMC,KAAK,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAClB,MAAMC,QAAQ,GAAGT,MAAM,CAAC,CAAC;EACzB,MAAMU,OAAO,GAAGR,SAAS,CAACE,aAAa,EAAE,aAAa,CAAC;;EAEvD;EACAH,QAAQ,CAAC,MAAM;IACb,IAAIQ,QAAQ,CAACE,OAAO,EAAE;MACpBF,QAAQ,CAACE,OAAO,CAACC,QAAQ,CAACC,CAAC,IAAI,KAAK;IACtC;EACF,CAAC,CAAC;EAEF,oBACEP,OAAA,CAACH,MAAM;IAACW,GAAG,EAAEL,QAAS;IAACM,IAAI,EAAE,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,CAAE;IAAAC,QAAA,eACvCV,OAAA;MAAsBW,MAAM,EAAC,UAAU;MAACC,KAAK,EAAC,OAAO;MAACC,GAAG,EAAC;IAAW;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAClE,CAAC;AAEb,CAAC;AAACf,EAAA,CAhBID,KAAK;EAAA,QAEOL,SAAS,EAGzBD,QAAQ;AAAA;AAAAuB,EAAA,GALJjB,KAAK;AAkBX,eAAeA,KAAK;AAAC,IAAAiB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}